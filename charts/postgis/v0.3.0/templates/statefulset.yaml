{{- include "common.statefulset" (list . "postgis.statefulset") -}}
{{- define "postgis.statefulset" -}}
metadata:
  {{- with .Values.labels }}
  labels:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.annotations }}
  annotations:
  {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ template "common.fullname" . }}-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "common.fullname" . }}
      role: master
  template:
    metadata:
      labels:
        role: master
        {{- with .Values.podLabels }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- (tpl . $) | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
      {{- with .Values.securityContext }}
      {{- tpl . $ | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ template "common.fullname" . }}
          image: {{ template "common.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.postgresqlInitdbArgs }}
            - name: POSTGRES_INITDB_ARGS
              value: {{ .Values.postgresqlInitdbArgs | quote }}
            {{- end }}
            {{- if .Values.persistence.mountPath }}
            - name: PGDATA
              value: {{ .Values.postgresqlDataDir | quote }}
            {{- end }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresqlUsername | quote }}
            - name: POSTGRES_PASSWORD
              {{- $param := dict "Value" .Values.postgresqlPassword "Context" . -}}
              {{ include "common.secretFrom" $param | nindent 14 }}
            - name: POSTGRES_DBNAME
              value: {{ .Values.postgresqlDatabase | quote }}
            {{- if .Values.tls.enabled }}
            - name: SSL_CERT_FILE
              value: /cert/tls.crt
            - name: SSL_KEY_FILE
              value: /cert/tls.key
            - name: SSL_CA_FILE
              value: /cert/ca.crt
            {{- end }}
            {{- with .Values.extraPodEnv }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          ports:
            - name: tcp-postgis
              containerPort: 5432
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              subPath: {{ .Values.persistence.subPath }}
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: cert
              mountPath: /cert/tls.key
              subPath: {{ .Values.tls.key_file }}
              readOnly: true
            - name: cert
              mountPath: /cert/tls.crt
              subPath: {{ .Values.tls.cert_file }}
              readOnly: true
            - name: cert
              mountPath: /cert/ca.crt
              subPath: {{ .Values.tls.ca_file }}
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- (tpl . $) | nindent 12 }}
            {{- end }}
          {{- if .Values.probe }}
            {{- with .Values.probe }}
            {{- tpl . $ | nindent 10 }}
            {{- end }}
          {{- else }}
          livenessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h localhost -U $POSTGRES_USER -d {{ template "postgresql.firstDatabaseName" . }}
                  PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d {{ template "postgresql.firstDatabaseName" . }} -c "\dt+" > /dev/null
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 2
          startupProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h localhost -U $POSTGRES_USER -d {{ template "postgresql.firstDatabaseName" . }}
                  PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d {{ template "postgresql.firstDatabaseName" . }} -c "\dt+" > /dev/null
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 5
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h localhost -U $POSTGRES_USER -d {{ template "postgresql.firstDatabaseName" . }}
                  PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d {{ template "postgresql.firstDatabaseName" . }} -c "\dt+" > /dev/null
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 2
          {{- end }}
      {{- with .Values.extraPodSpec }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      volumes:
        {{- if .Values.tls.enabled }}
        - name: cert
          secret:
            secretName: {{ .Values.tls.secretName }}
            defaultMode: 0440
        {{- end }}
        {{- with .Values.extraVolume }}
        {{- (tpl . $) | nindent 8 }}
        {{- end }}
{{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
{{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
{{- end }}
{{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
{{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "common.storageClass" . | nindent 8 }}
{{- end -}}
{{- end -}}
